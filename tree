### [230\. 二叉搜索树中第K小的元素](https://leetcode-cn.com/problems/kth-smallest-element-in-a-bst/)

Difficulty: **中等**

给定一个二叉搜索树，编写一个函数&amp;nbsp;<code>kthSmallest</code>&amp;nbsp;来查找其中第&amp;nbsp;<strong>k&amp;nbsp;</strong>个最小的元素。</p>

<p>

给定一个二叉搜索树，编写一个函数 `kthSmallest` 来查找其中第 **k **个最小的元素。

**说明：**  
你可以假设 k 总是有效的，1 ≤ k ≤ 二叉搜索树元素个数。

**示例 1:**

```
输入: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
输出: 1```

**示例 2:**

```
输入: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
输出: 3```

**进阶：**  
如果二叉搜索树经常被修改（插入/删除操作）并且你需要频繁地查找第 k 小的值，你将如何优化 `kthSmallest` 函数？

<strong>说明：</strong><br>
你可以假设 k 总是有效的，1 &amp;le; k &amp;le; 二叉搜索树元素个数。</p>

<p><strong>示例 1:</strong></p>

```
<strong>输入:</strong> root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
&amp;nbsp;  2
<strong>输出:</strong> 1```

<p><strong>示例 2:</strong></p>

```
<strong>输入:</strong> root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
<strong>输出:</strong> 3```

<p><strong>进阶：</strong><br>
如果二叉搜索树经常被修改（插入/删除操作）并且你需要频繁地查找第 k 小的值，你将如何优化&amp;nbsp;<code>kthSmallest</code>&amp;nbsp;函数？</p>
" class="notranslate" style="display: block;">

#### Solution

Language: **Java**

```java
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
//     public int kthSmallest(TreeNode root, int k) {
//         int left=countNodes(root.left);
//         if(k==left+1){
//             return root.val;
//         }else if(left>=k){
//             return kthSmallest(root.left,k);
//         }else{
//             return kthSmallest(root.right,k-left-1);
//         }
//     }
    
//     private int countNodes(TreeNode root) {
//         if(root==null){
//             return 0;
//         }
//         return 1+countNodes(root.left)+countNodes(root.right);
//     }
    //中序遍历,到达个数是终止
    private int res=Integer.MAX_VALUE,count;
    
    public int kthSmallest(TreeNode root, int k) {
        count=k;
        inOrder(root);
        return res;
    }
    
    private void inOrder(TreeNode root){
        if(root!=null){
            inOrder(root.left);
            if(res!=Integer.MAX_VALUE){
                return;
            }
            if(--count==0){
                res=root.val;
            }
            inOrder(root.right);
        }
    }
}
```
