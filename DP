### [152\. 乘积最大子序列](https://leetcode-cn.com/problems/maximum-product-subarray/)

Difficulty: **中等**

给定一个整数数组 <code>nums</code>&amp;nbsp;，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。</p>

<p>

给定一个整数数组 `nums` ，找出一个序列中乘积最大的连续子序列（该序列至少包含一个数）。

**示例 1:**

```
输入: [2,3,-2,4]
输出: 6
解释: 子数组 [2,3] 有最大乘积 6。
```

**示例 2:**

```
输入: [-2,0,-1]
输出: 0
解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。```

<strong>示例 1:</strong></p>

```
<strong>输入:</strong> [2,3,-2,4]
<strong>输出:</strong> <code>6</code>
<strong>解释:</strong>&amp;nbsp;子数组 [2,3] 有最大乘积 6。
```

<p><strong>示例 2:</strong></p>

```
<strong>输入:</strong> [-2,0,-1]
<strong>输出:</strong> 0
<strong>解释:</strong>&amp;nbsp;结果不能为 2, 因为 [-2,-1] 不是子数组。```
" class="notranslate" style="display: block;">

#### Solution

Language: **Java**

```java
class Solution {
    public int maxProduct(int[] nums) {
        int res=Integer.MIN_VALUE;
        int imax=1;
        int imin=1;
        for(int i=0;i<nums.length;i++){
            if(nums[i]<0){
                int tmp=imax;
                imax=imin;
                imin=tmp;
            }
            imax=Math.max(imax*nums[i],nums[i]);
            imin=Math.min(imin*nums[i],nums[i]);
            res=Math.max(res,imax);
        }
        return res;
    }
}

class Solution {
    //正反向走两遍，防止3,-1,4这个序列的返回为3
    public int maxProduct(int[] nums) {
        int a=1;
        int max=nums[0];
        for(int num:nums){
            a*=num;
            if(max<a){
                max=a;
            }
            if(num==0){
                a=1;
            }
        }
        a=1;
        for(int i=nums.length-1;i>=0;i--){
            a*=nums[i];
            if(max<a){
                max=a;
            }
            if(nums[i]==0){
                a=1;
            }
        }
        return max;
    }
}
```

### [413\. 等差数列划分](https://leetcode-cn.com/problems/arithmetic-slices/)

Difficulty: **中等**

如果一个数列至少有三个元素，并且任意两个相邻元素之差相同，则称该数列为等差数列。</p>

<p>例如，以下数列为等差数列:</p>

```

1, 3, 5, 7, 9
7, 7, 7, 7
3, -1, -5, -9```

<p>以下数列不是等差数列。</p>

```

1, 1, 2, 5, 7```

<p>&amp;nbsp;</p>

<p>数组 A 包含 N 个数，且索引从0开始。数组 A 的一个子数组划分为数组 (P, Q)，P 与 Q 是整数且满足 0&amp;lt;=P&amp;lt;Q&amp;lt;N 。</p>

<p>如果满足以下条件，则称子数组(P, Q)为等差数组：</p>

<p>元素 A[P], A[p + 1], ..., A[Q - 1], A[Q] 是等差的。并且&amp;nbsp;P + 1 &amp;lt; Q 。</p>

<p>函数要返回数组 A 中所有为等差数组的子数组个数。</p>

<p>&amp;nbsp;</p>

<p>

如果一个数列至少有三个元素，并且任意两个相邻元素之差相同，则称该数列为等差数列。

例如，以下数列为等差数列:

```
1, 3, 5, 7, 9
7, 7, 7, 7
3, -1, -5, -9```

以下数列不是等差数列。

```
1, 1, 2, 5, 7```

数组 A 包含 N 个数，且索引从0开始。数组 A 的一个子数组划分为数组 (P, Q)，P 与 Q 是整数且满足 0<=P<Q<N 。

如果满足以下条件，则称子数组(P, Q)为等差数组：

元素 A[P], A[p + 1], ..., A[Q - 1], A[Q] 是等差的。并且 P + 1 < Q 。

函数要返回数组 A 中所有为等差数组的子数组个数。

**示例:**

```
A = [1, 2, 3, 4]

返回: 3, A 中有三个子等差数组: [1, 2, 3], [2, 3, 4] 以及自身 [1, 2, 3, 4]。
```

<strong>示例:</strong></p>

```

A = [1, 2, 3, 4]

返回: 3, A 中有三个子等差数组: [1, 2, 3], [2, 3, 4] 以及自身 [1, 2, 3, 4]。
```
" class="notranslate" style="display: block;">

#### Solution

Language: **Java**

```java
class Solution {
    // public int numberOfArithmeticSlices(int[] A) {
    //     if(A.length<3){
    //         return 0;
    //     }
    //     int[] res=new int[A.length];
    //     res[0]=0;
    //     res[1]=0;
    //     int minus=A[1]-A[0];
    //     int num=1;
    //     for(int i=2;i<A.length;i++){
    //         if(A[i]-A[i-1]==minus){
    //             num++;
    //             res[i]=num*(num-1)/2+res[i-num];
    //         }else{
    //             minus=A[i]-A[i-1];
    //             num=1;
    //             res[i]=res[i-1];
    //         }
    //     }
    //     return res[A.length-1];
    // }
    
    public int numberOfArithmeticSlices(int[] A) {
        int dp=0;
        int sum=0;
        for(int i=2;i<A.length;i++){
            if(A[i]-A[i-1]==A[i-1]-A[i-2]){
                dp=1+dp;
                sum+=dp;
            }else{
                dp=0;
            }
        }
        return sum;
    }
}
```
